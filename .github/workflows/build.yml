name: Build
on:
  push:
    tags: [ 'v*' ]
    branches: [ 'master' ]
  pull_request:
    branches: [ 'master' ]

jobs:
  build:
    timeout-minutes: 15
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, 'ci skip')"
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - uses: coursier/setup-action@v1.2.0-M3
      - uses: coursier/cache-action@v6
        with:
          extraFiles: bleep.yaml

      - name: Install bleep stable
        run: cs install --channel https://raw.githubusercontent.com/oyvindberg/bleep/master/coursier-channel.json bleep --verbose

      - name: Scalafmt Check
        run: bleep fmt --check

      - name: Run tests
        run: |
          bleep compile
          bleep test

  build-native:
    name: Native build on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            jni-folder: .bleep/generated-resources/crossterm/native
          - os: macos-latest
            jni-folder: .bleep/generated-resources/crossterm/native
          - os: windows-latest
            jni-folder: .bleep\generated-resources\crossterm\native
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive

      - uses: coursier/setup-action@v1.2.0-M3
      - uses: coursier/cache-action@v6
        with:
          extraFiles: bleep.yaml
      - name: Set up cargo cache
        uses: actions/cache@v3
        continue-on-error: false
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-cargo-

      - name: Install bleep stable
        run: cs install --channel https://raw.githubusercontent.com/oyvindberg/bleep/master/coursier-channel.json bleep --verbose

      - name: Build jni library
        run: bleep gen-jni-library
        if: runner.os != 'Windows'

      - name: Test jni library
        run: bleep run demo@jvm3 sparkline -- --once
        if: runner.os != 'Windows'

        # as is normal, everything involving windows is terrible.
        # - powershell doesn't work, for one: https://github.com/dirs-dev/directories-jvm/issues/49
        # - with `shell: cmd` only one command can be run at a time, so this is split up
      - name: bleep compile-server auto-shutdown-enable (windows)
        run: bleep compile-server auto-shutdown-enable
        shell: cmd
        if: runner.os == 'Windows'

      - name: Build jni library (windows)
        run: bleep gen-jni-library
        shell: cmd
        if: runner.os == 'Windows'

      - name: Test jni library (windows)
        run: bleep run demo@jvm3 sparkline -- --once
        shell: cmd
        if: runner.os == 'Windows'

      - name: Temporarily save package
        uses: actions/upload-artifact@v3
        with:
          name: native
          path: ${{ matrix.jni-folder }}
          retention-days: 1

  release:
    timeout-minutes: 15
    runs-on: ubuntu-latest
    needs: [ build, build-native ]
#    if: "startsWith(github.ref, 'refs/tags/v')"
    steps:
      - uses: actions/checkout@v2
        with:
          submodules: recursive
      - id: get_version
        uses: battila7/get-version-action@v2
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          path: .bleep/generated-resources/crossterm/
      - name: Display structure of downloaded files
        run: find .bleep/generated-resources/crossterm
#      - name: Release
#        run: |
#          chmod +x ./artifacts/bleep-x86_64-pc-linux/bleep
#          ./artifacts/bleep-x86_64-pc-linux/bleep --dev generate-resources
#          ./artifacts/bleep-x86_64-pc-linux/bleep --dev publish
#        env:
#          PGP_PASSPHRASE: ${{ secrets.PGP_PASSPHRASE }}
#          PGP_SECRET: ${{ secrets.PGP_SECRET }}
#          SONATYPE_PASSWORD: ${{ secrets.SONATYPE_PASSWORD }}
#          SONATYPE_USERNAME: ${{ secrets.SONATYPE_USERNAME }}
#      - name: Prepare files
#        run: |
#          export VERSION=${{ steps.get_version.outputs.version-without-v }}
#          bash .github/prepare-release.sh
#      - name: Upload-to-release
#        uses: softprops/action-gh-release@v1
#        with:
#          name: "${{ steps.get_version.outputs.version-without-v }}"
#          prerelease: true
#          generate_release_notes: true
#          files: |
#            work/release/*
